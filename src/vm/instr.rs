use super::*;

#[derive(Debug, Clone)]
pub(in crate::vm) enum HLInstr {
    LineStart(Line),
    JumpRel { amount: usize, condition: Option<NumberReg> },
    JumpErr,
    JumpLine(NumberReg),
    MoveSV { arg: StringReg, out: ValueReg },
    MoveNV { arg: NumberReg, out: ValueReg },
    MoveVV { arg: ValueReg, out: ValueReg },
    MoveVS { arg: ValueReg, out: StringReg },
    MoveVN { arg: ValueReg, out: NumberReg },
    StringifyN { arg: NumberReg, out: StringReg },
    StringifyV { arg: ValueReg, out: StringReg },
    AddS { arg1: StringReg, arg2: StringReg, out: StringReg },
    AddN { arg1: NumberReg, arg2: NumberReg, out: NumberReg },
    AddV { arg1: ValueReg, arg2: ValueReg, out: ValueReg },
    SubS { arg1: StringReg, arg2: StringReg, out: StringReg },
    SubN { arg1: NumberReg, arg2: NumberReg, out: NumberReg },
    SubV { arg1: ValueReg, arg2: ValueReg, out: ValueReg },
    Mul { arg1: NumberReg, arg2: NumberReg, out: NumberReg },
    Div { arg1: NumberReg, arg2: NumberReg, out: NumberReg },
    Mod { arg1: NumberReg, arg2: NumberReg, out: NumberReg },
    Pow { arg1: NumberReg, arg2: NumberReg, out: NumberReg },
    Eq { arg1: ValueReg, arg2: ValueReg, out: NumberReg },
    Le { arg1: ValueReg, arg2: ValueReg, out: NumberReg },
    Lt { arg1: ValueReg, arg2: ValueReg, out: NumberReg },
    IncS { arg: StringReg, out: StringReg },
    IncN { arg: NumberReg, out: NumberReg },
    IncV { arg: ValueReg, out: ValueReg },
    DecS { arg: StringReg, out: StringReg },
    DecN { arg: NumberReg, out: NumberReg },
    DecV { arg: ValueReg, out: ValueReg },
    Abs { arg: NumberReg, out: NumberReg },
    Fact { arg: NumberReg, out: NumberReg },
    Sqrt { arg: NumberReg, out: NumberReg },
    Sin { arg: NumberReg, out: NumberReg },
    Cos { arg: NumberReg, out: NumberReg },
    Tan { arg: NumberReg, out: NumberReg },
    Asin { arg: NumberReg, out: NumberReg },
    Acos { arg: NumberReg, out: NumberReg },
    Atan { arg: NumberReg, out: NumberReg },
    Neg { arg: NumberReg, out: NumberReg },
    And { arg1: NumberReg, arg2: NumberReg, out: NumberReg },
    Or { arg1: NumberReg, arg2: NumberReg, out: NumberReg },
    Not { arg: NumberReg, out: NumberReg },
    BoolN { arg: NumberReg, out: NumberReg },
    BoolV { arg: ValueReg, out: NumberReg },
}
